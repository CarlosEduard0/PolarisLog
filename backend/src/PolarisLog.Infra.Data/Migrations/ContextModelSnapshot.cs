// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PolarisLog.Infra;

namespace PolarisLog.Infra.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PolarisLog.Domain.Entities.Ambiente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ambientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5676e01-88ef-47a2-b8f8-397dab18feb7"),
                            Nome = "Produção"
                        },
                        new
                        {
                            Id = new Guid("7dae489b-abf7-47da-8c90-7fe2b34cc024"),
                            Nome = "Homologação"
                        },
                        new
                        {
                            Id = new Guid("03341d8f-2064-4ce9-ad13-a247760ab110"),
                            Nome = "Dev"
                        });
                });

            modelBuilder.Entity("PolarisLog.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AmbienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArquivadoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CadastradoEm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<Guid>("NivelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Origem")
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AmbienteId");

                    b.HasIndex("NivelId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("PolarisLog.Domain.Entities.Nivel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Niveis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b84331d-3d3f-4ded-b7c2-35b6e3511ff8"),
                            Nome = "Verbose"
                        },
                        new
                        {
                            Id = new Guid("f917899a-85d6-4b1a-ad5b-7573522bdd00"),
                            Nome = "Debug"
                        },
                        new
                        {
                            Id = new Guid("53a2b01f-7ba7-4873-b7ac-4e543396625a"),
                            Nome = "Information"
                        },
                        new
                        {
                            Id = new Guid("31197b8c-bd8b-43b1-bdc5-8b7e8f078a3e"),
                            Nome = "Warning"
                        },
                        new
                        {
                            Id = new Guid("da19754d-9deb-48f6-830b-76ce2e69c6c8"),
                            Nome = "Error"
                        },
                        new
                        {
                            Id = new Guid("240fd2ac-e94f-44f7-a11e-fcf2ca69f57c"),
                            Nome = "Fatal"
                        });
                });

            modelBuilder.Entity("PolarisLog.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PolarisLog.Domain.Entities.Log", b =>
                {
                    b.HasOne("PolarisLog.Domain.Entities.Ambiente", "Ambiente")
                        .WithMany()
                        .HasForeignKey("AmbienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolarisLog.Domain.Entities.Nivel", "Nivel")
                        .WithMany()
                        .HasForeignKey("NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PolarisLog.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
